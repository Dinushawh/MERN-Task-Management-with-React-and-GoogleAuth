{"ast":null,"code":"var _jsxFileName = \"/Users/dinushaweerakoon/Desktop/Projects/MERN-Todo-App-with-React-and-GoogleAuth/frontend/src/components/GoogleLogin.jsx\";\nimport React from \"react\";\nimport { GoogleLogin } from \"@react-oauth/google\";\nimport jwtDecode from \"jwt-decode\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction GoogleLoginAuth() {\n  const isUserAvailable = async ueerCredentials => {\n    console.log(ueerCredentials);\n    const res = await axios.get(\"http://localhost:5050/users/\");\n    const data = res.data;\n    console.log(data);\n    const user = data.find(user => user.email === ueerCredentials.email);\n    if (user) {\n      toast.error(\"User already exists with this email address please login to continue\");\n    } else {\n      console.log(\"Login Failed\");\n    }\n  };\n  const handleSubmit = async () => {\n    if (password === \"\" || email === \"\" || fullname === \"\") {\n      toast.error(\"Please fill all the fields\");\n    } else {\n      axios.post(\"http://localhost:5050/users/add\", {\n        password,\n        email,\n        role,\n        fullname,\n        googleauth\n      }).then(res => {\n        toast.promise(new Promise((resolve, reject) => {\n          if (res.status === 200) {\n            resolve(\"User created successfully\");\n          } else {\n            reject(\"Failed to creeate user\");\n          }\n        }), {\n          pending: \"Please wait we are working on your account...\",\n          success: \"User created successfully\",\n          error: \"Failed to create user\"\n        });\n        console.log(res);\n      }).catch(err => {\n        toast.error(\"Failed to create user\");\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 gap-4 pt-4\",\n      children: /*#__PURE__*/_jsxDEV(GoogleLogin, {\n        onSuccess: credentialResponse => {\n          console.log(credentialResponse.credential);\n          const USER_CREDENTIAL = jwtDecode(credentialResponse.credential);\n          isUserAvailable(USER_CREDENTIAL);\n        },\n        onError: () => {\n          console.log(\"Login Failed\");\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_c = GoogleLoginAuth;\nexport default GoogleLoginAuth;\nvar _c;\n$RefreshReg$(_c, \"GoogleLoginAuth\");","map":{"version":3,"names":["React","GoogleLogin","jwtDecode","axios","toast","jsxDEV","_jsxDEV","Fragment","_Fragment","GoogleLoginAuth","isUserAvailable","ueerCredentials","console","log","res","get","data","user","find","email","error","handleSubmit","password","fullname","post","role","googleauth","then","promise","Promise","resolve","reject","status","pending","success","catch","err","children","className","onSuccess","credentialResponse","credential","USER_CREDENTIAL","onError","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dinushaweerakoon/Desktop/Projects/MERN-Todo-App-with-React-and-GoogleAuth/frontend/src/components/GoogleLogin.jsx"],"sourcesContent":["import React from \"react\";\n\nimport { GoogleLogin } from \"@react-oauth/google\";\nimport jwtDecode from \"jwt-decode\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\n\nfunction GoogleLoginAuth() {\n  const isUserAvailable = async (ueerCredentials) => {\n    console.log(ueerCredentials);\n    const res = await axios.get(\"http://localhost:5050/users/\");\n    const data = res.data;\n    console.log(data);\n    const user = data.find((user) => user.email === ueerCredentials.email);\n    if (user) {\n      toast.error(\n        \"User already exists with this email address please login to continue\"\n      );\n    } else {\n      console.log(\"Login Failed\");\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (password === \"\" || email === \"\" || fullname === \"\") {\n      toast.error(\"Please fill all the fields\");\n    } else {\n      axios\n        .post(\"http://localhost:5050/users/add\", {\n          password,\n          email,\n          role,\n          fullname,\n          googleauth,\n        })\n        .then((res) => {\n          toast.promise(\n            new Promise((resolve, reject) => {\n              if (res.status === 200) {\n                resolve(\"User created successfully\");\n              } else {\n                reject(\"Failed to creeate user\");\n              }\n            }),\n            {\n              pending: \"Please wait we are working on your account...\",\n              success: \"User created successfully\",\n              error: \"Failed to create user\",\n            }\n          );\n          console.log(res);\n        })\n\n        .catch((err) => {\n          toast.error(\"Failed to create user\");\n        });\n    }\n  };\n\n  return (\n    <>\n      <div className=\"grid grid-cols-1 gap-4 pt-4\">\n        <GoogleLogin\n          onSuccess={(credentialResponse) => {\n            console.log(credentialResponse.credential);\n            const USER_CREDENTIAL = jwtDecode(credentialResponse.credential);\n            isUserAvailable(USER_CREDENTIAL);\n          }}\n          onError={() => {\n            console.log(\"Login Failed\");\n          }}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default GoogleLoginAuth;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}