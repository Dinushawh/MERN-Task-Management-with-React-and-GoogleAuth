{"ast":null,"code":"var _jsxFileName = \"/Users/dinushaweerakoon/Desktop/Projects/MERN-Todo-App-with-React-and-GoogleAuth/frontend/src/components/GoogleLogin.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { GoogleLogin } from \"@react-oauth/google\";\nimport jwtDecode from \"jwt-decode\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction GoogleLoginAuth() {\n  _s();\n  const navigate = useNavigate();\n  const isUserAvailable = async ueerCredentials => {\n    console.log(ueerCredentials);\n    const res = await axios.get(\"http://localhost:5050/users/\");\n    const data = res.data;\n    console.log(data);\n    const user = data.find(user => user.email === ueerCredentials.email && user.googleauth === true);\n    if (user) {\n      toast.success(\"Login Successful\");\n      navigate(\"/home\", {\n        replace: true\n      });\n    } else {\n      toast.error(\"You have logged in using credentials please login using credentials to continue\");\n    }\n  };\n  const handleSubmit = async ueerCredentials => {\n    const password = \"loggedwithgoogleauth\";\n    const role = \"user\";\n    const googleauth = true;\n    axios.post(\"http://localhost:5050/users/add\", {\n      password,\n      email: ueerCredentials.email,\n      role,\n      fullname: ueerCredentials.name,\n      googleauth\n    }).then(res => {\n      toast.promise(new Promise((resolve, reject) => {\n        if (res.status === 200) {\n          resolve(\"User created successfully\");\n        } else {\n          reject(\"Failed to creeate user\");\n        }\n      }), {\n        pending: \"Please wait we are working on your account...\",\n        success: \"User created successfully\",\n        error: \"Failed to create user\"\n      });\n      console.log(res);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 gap-4 pt-4\",\n      children: /*#__PURE__*/_jsxDEV(GoogleLogin, {\n        onSuccess: credentialResponse => {\n          console.log(credentialResponse.credential);\n          const USER_CREDENTIAL = jwtDecode(credentialResponse.credential);\n          isUserAvailable(USER_CREDENTIAL);\n        },\n        onError: () => {\n          console.log(\"Login Failed\");\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(GoogleLoginAuth, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = GoogleLoginAuth;\nexport default GoogleLoginAuth;\nvar _c;\n$RefreshReg$(_c, \"GoogleLoginAuth\");","map":{"version":3,"names":["React","GoogleLogin","jwtDecode","axios","toast","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","GoogleLoginAuth","_s","navigate","isUserAvailable","ueerCredentials","console","log","res","get","data","user","find","email","googleauth","success","replace","error","handleSubmit","password","role","post","fullname","name","then","promise","Promise","resolve","reject","status","pending","children","className","onSuccess","credentialResponse","credential","USER_CREDENTIAL","onError","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dinushaweerakoon/Desktop/Projects/MERN-Todo-App-with-React-and-GoogleAuth/frontend/src/components/GoogleLogin.jsx"],"sourcesContent":["import React from \"react\";\n\nimport { GoogleLogin } from \"@react-oauth/google\";\nimport jwtDecode from \"jwt-decode\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { useNavigate } from \"react-router-dom\";\n\nfunction GoogleLoginAuth() {\n  const navigate = useNavigate();\n\n  const isUserAvailable = async (ueerCredentials) => {\n    console.log(ueerCredentials);\n    const res = await axios.get(\"http://localhost:5050/users/\");\n    const data = res.data;\n    console.log(data);\n    const user = data.find(\n      (user) => user.email === ueerCredentials.email && user.googleauth === true\n    );\n    if (user) {\n      toast.success(\"Login Successful\");\n      navigate(\"/home\", { replace: true });\n    } else {\n      toast.error(\n        \"You have logged in using credentials please login using credentials to continue\"\n      );\n    }\n  };\n\n  const handleSubmit = async (ueerCredentials) => {\n    const password = \"loggedwithgoogleauth\";\n    const role = \"user\";\n    const googleauth = true;\n    axios\n      .post(\"http://localhost:5050/users/add\", {\n        password,\n        email: ueerCredentials.email,\n        role,\n        fullname: ueerCredentials.name,\n        googleauth,\n      })\n      .then((res) => {\n        toast.promise(\n          new Promise((resolve, reject) => {\n            if (res.status === 200) {\n              resolve(\"User created successfully\");\n            } else {\n              reject(\"Failed to creeate user\");\n            }\n          }),\n          {\n            pending: \"Please wait we are working on your account...\",\n            success: \"User created successfully\",\n            error: \"Failed to create user\",\n          }\n        );\n        console.log(res);\n      });\n  };\n\n  return (\n    <>\n      <div className=\"grid grid-cols-1 gap-4 pt-4\">\n        <GoogleLogin\n          onSuccess={(credentialResponse) => {\n            console.log(credentialResponse.credential);\n            const USER_CREDENTIAL = jwtDecode(credentialResponse.credential);\n            isUserAvailable(USER_CREDENTIAL);\n          }}\n          onError={() => {\n            console.log(\"Login Failed\");\n          }}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default GoogleLoginAuth;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}