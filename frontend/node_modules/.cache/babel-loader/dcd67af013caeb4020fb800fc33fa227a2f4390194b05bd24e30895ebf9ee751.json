{"ast":null,"code":"var _jsxFileName = \"/Users/dinushaweerakoon/Desktop/Projects/MERN-Todo-App-with-React-and-GoogleAuth/frontend/src/components/GoogleRegister.jsx\";\nimport React from \"react\";\nimport { GoogleLogin } from \"@react-oauth/google\";\nimport jwtDecode from \"jwt-decode\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction GoogleRegister() {\n  const isUserAvailable = async ueerCredentials => {\n    console.log(ueerCredentials);\n    const res = await axios.get(\"http://localhost:5050/users/\");\n    const data = res.data;\n    console.log(data);\n    const user = data.find(user => user.email === ueerCredentials.email);\n    if (user) {\n      toast(\"User already exists with this email address please login to continue\", {\n        icon: \"⚠️\"\n      });\n    } else {\n      handleSubmit(ueerCredentials);\n    }\n  };\n  const handleSubmit = async ueerCredentials => {\n    const password = \"loggedwithgoogleauth\";\n    const role = \"user\";\n    const googleauth = true;\n    axios.post(\"http://localhost:5050/users/add\", {\n      password,\n      email: ueerCredentials.email,\n      role,\n      fullname: ueerCredentials.name,\n      googleauth\n    }).then(res => {\n      toast.promise(new Promise((resolve, reject) => {\n        if (res.status === 200) {\n          resolve(\"User created successfully\");\n        } else {\n          reject(\"Failed to creeate user\");\n        }\n      }), {\n        pending: \"Please wait we are working on your account...\",\n        success: \"User created successfully\",\n        error: \"Failed to create user\"\n      });\n      console.log(res);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 gap-4 pt-4\",\n      children: /*#__PURE__*/_jsxDEV(GoogleLogin, {\n        onSuccess: credentialResponse => {\n          console.log(credentialResponse.credential);\n          const USER_CREDENTIAL = jwtDecode(credentialResponse.credential);\n          isUserAvailable(USER_CREDENTIAL);\n        },\n        onError: () => {\n          console.log(\"Login Failed\");\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_c = GoogleRegister;\nexport default GoogleRegister;\nvar _c;\n$RefreshReg$(_c, \"GoogleRegister\");","map":{"version":3,"names":["React","GoogleLogin","jwtDecode","axios","toast","jsxDEV","_jsxDEV","Fragment","_Fragment","GoogleRegister","isUserAvailable","ueerCredentials","console","log","res","get","data","user","find","email","icon","handleSubmit","password","role","googleauth","post","fullname","name","then","promise","Promise","resolve","reject","status","pending","success","error","children","className","onSuccess","credentialResponse","credential","USER_CREDENTIAL","onError","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dinushaweerakoon/Desktop/Projects/MERN-Todo-App-with-React-and-GoogleAuth/frontend/src/components/GoogleRegister.jsx"],"sourcesContent":["import React from \"react\";\nimport { GoogleLogin } from \"@react-oauth/google\";\nimport jwtDecode from \"jwt-decode\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\n\nfunction GoogleRegister() {\n  const isUserAvailable = async (ueerCredentials) => {\n    console.log(ueerCredentials);\n    const res = await axios.get(\"http://localhost:5050/users/\");\n    const data = res.data;\n    console.log(data);\n    const user = data.find((user) => user.email === ueerCredentials.email);\n    if (user) {\n      toast(\n        \"User already exists with this email address please login to continue\",\n        {\n          icon: \"⚠️\",\n        }\n      );\n    } else {\n      handleSubmit(ueerCredentials);\n    }\n  };\n\n  const handleSubmit = async (ueerCredentials) => {\n    const password = \"loggedwithgoogleauth\";\n    const role = \"user\";\n    const googleauth = true;\n    axios\n      .post(\"http://localhost:5050/users/add\", {\n        password,\n        email: ueerCredentials.email,\n        role,\n        fullname: ueerCredentials.name,\n        googleauth,\n      })\n      .then((res) => {\n        toast.promise(\n          new Promise((resolve, reject) => {\n            if (res.status === 200) {\n              resolve(\"User created successfully\");\n            } else {\n              reject(\"Failed to creeate user\");\n            }\n          }),\n          {\n            pending: \"Please wait we are working on your account...\",\n            success: \"User created successfully\",\n            error: \"Failed to create user\",\n          }\n        );\n        console.log(res);\n      });\n  };\n\n  return (\n    <>\n      <div className=\"grid grid-cols-1 gap-4 pt-4\">\n        <GoogleLogin\n          onSuccess={(credentialResponse) => {\n            console.log(credentialResponse.credential);\n            const USER_CREDENTIAL = jwtDecode(credentialResponse.credential);\n            isUserAvailable(USER_CREDENTIAL);\n          }}\n          onError={() => {\n            console.log(\"Login Failed\");\n          }}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default GoogleRegister;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,qBAAqB;AACjD,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEvC,SAASC,cAAcA,CAAA,EAAG;EACxB,MAAMC,eAAe,GAAG,MAAOC,eAAe,IAAK;IACjDC,OAAO,CAACC,GAAG,CAACF,eAAe,CAAC;IAC5B,MAAMG,GAAG,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,8BAA8B,CAAC;IAC3D,MAAMC,IAAI,GAAGF,GAAG,CAACE,IAAI;IACrBJ,OAAO,CAACC,GAAG,CAACG,IAAI,CAAC;IACjB,MAAMC,IAAI,GAAGD,IAAI,CAACE,IAAI,CAAED,IAAI,IAAKA,IAAI,CAACE,KAAK,KAAKR,eAAe,CAACQ,KAAK,CAAC;IACtE,IAAIF,IAAI,EAAE;MACRb,KAAK,CACH,sEAAsE,EACtE;QACEgB,IAAI,EAAE;MACR,CACF,CAAC;IACH,CAAC,MAAM;MACLC,YAAY,CAACV,eAAe,CAAC;IAC/B;EACF,CAAC;EAED,MAAMU,YAAY,GAAG,MAAOV,eAAe,IAAK;IAC9C,MAAMW,QAAQ,GAAG,sBAAsB;IACvC,MAAMC,IAAI,GAAG,MAAM;IACnB,MAAMC,UAAU,GAAG,IAAI;IACvBrB,KAAK,CACFsB,IAAI,CAAC,iCAAiC,EAAE;MACvCH,QAAQ;MACRH,KAAK,EAAER,eAAe,CAACQ,KAAK;MAC5BI,IAAI;MACJG,QAAQ,EAAEf,eAAe,CAACgB,IAAI;MAC9BH;IACF,CAAC,CAAC,CACDI,IAAI,CAAEd,GAAG,IAAK;MACbV,KAAK,CAACyB,OAAO,CACX,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QAC/B,IAAIlB,GAAG,CAACmB,MAAM,KAAK,GAAG,EAAE;UACtBF,OAAO,CAAC,2BAA2B,CAAC;QACtC,CAAC,MAAM;UACLC,MAAM,CAAC,wBAAwB,CAAC;QAClC;MACF,CAAC,CAAC,EACF;QACEE,OAAO,EAAE,+CAA+C;QACxDC,OAAO,EAAE,2BAA2B;QACpCC,KAAK,EAAE;MACT,CACF,CAAC;MACDxB,OAAO,CAACC,GAAG,CAACC,GAAG,CAAC;IAClB,CAAC,CAAC;EACN,CAAC;EAED,oBACER,OAAA,CAAAE,SAAA;IAAA6B,QAAA,eACE/B,OAAA;MAAKgC,SAAS,EAAC,6BAA6B;MAAAD,QAAA,eAC1C/B,OAAA,CAACL,WAAW;QACVsC,SAAS,EAAGC,kBAAkB,IAAK;UACjC5B,OAAO,CAACC,GAAG,CAAC2B,kBAAkB,CAACC,UAAU,CAAC;UAC1C,MAAMC,eAAe,GAAGxC,SAAS,CAACsC,kBAAkB,CAACC,UAAU,CAAC;UAChE/B,eAAe,CAACgC,eAAe,CAAC;QAClC,CAAE;QACFC,OAAO,EAAEA,CAAA,KAAM;UACb/B,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;QAC7B;MAAE;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC,gBACN,CAAC;AAEP;AAACC,EAAA,GAlEQvC,cAAc;AAoEvB,eAAeA,cAAc;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}