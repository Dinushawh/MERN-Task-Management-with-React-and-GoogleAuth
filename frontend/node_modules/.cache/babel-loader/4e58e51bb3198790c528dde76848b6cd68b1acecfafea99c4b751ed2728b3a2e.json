{"ast":null,"code":"var _jsxFileName = \"/Users/dinushaweerakoon/Desktop/Projects/MERN-Todo-App-with-React-and-GoogleAuth/frontend/src/components/GoogleLogin.jsx\";\nimport React from \"react\";\nimport { GoogleLogin } from \"@react-oauth/google\";\nimport jwtDecode from \"jwt-decode\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction GoogleLoginAuth() {\n  const isUserAvailable = async ueerCredentials => {\n    const res = await axios.get(\"http://localhost:5050/users/\");\n    const data = res.data;\n    console.log(data);\n    const user = data.find(() => user.email === ueerCredentials.email);\n    if (user) {\n      toast.error(\"Account already exists with this email address\");\n      console.log(\"User already exists\");\n    } else {\n      console.log(\"User does not exist\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 gap-4 pt-4\",\n      children: /*#__PURE__*/_jsxDEV(GoogleLogin, {\n        onSuccess: credentialResponse => {\n          console.log(credentialResponse.credential);\n          const USER_CREDENTIAL = jwtDecode(credentialResponse.credential);\n          console.log(USER_CREDENTIAL);\n          isUserAvailable(USER_CREDENTIAL.email);\n        },\n        onError: () => {\n          console.log(\"Login Failed\");\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_c = GoogleLoginAuth;\nexport default GoogleLoginAuth;\nvar _c;\n$RefreshReg$(_c, \"GoogleLoginAuth\");","map":{"version":3,"names":["React","GoogleLogin","jwtDecode","axios","toast","jsxDEV","_jsxDEV","Fragment","_Fragment","GoogleLoginAuth","isUserAvailable","ueerCredentials","res","get","data","console","log","user","find","email","error","children","className","onSuccess","credentialResponse","credential","USER_CREDENTIAL","onError","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/dinushaweerakoon/Desktop/Projects/MERN-Todo-App-with-React-and-GoogleAuth/frontend/src/components/GoogleLogin.jsx"],"sourcesContent":["import React from \"react\";\n\nimport { GoogleLogin } from \"@react-oauth/google\";\nimport jwtDecode from \"jwt-decode\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\n\nfunction GoogleLoginAuth() {\n  const isUserAvailable = async (ueerCredentials) => {\n    const res = await axios.get(\"http://localhost:5050/users/\");\n    const data = res.data;\n    console.log(data);\n    const user = data.find(() => user.email === ueerCredentials.email);\n    if (user) {\n      toast.error(\"Account already exists with this email address\");\n      console.log(\"User already exists\");\n    } else {\n      console.log(\"User does not exist\");\n    }\n  };\n\n  return (\n    <>\n      <div className=\"grid grid-cols-1 gap-4 pt-4\">\n        <GoogleLogin\n          onSuccess={(credentialResponse) => {\n            console.log(credentialResponse.credential);\n            const USER_CREDENTIAL = jwtDecode(credentialResponse.credential);\n            console.log(USER_CREDENTIAL);\n            isUserAvailable(USER_CREDENTIAL.email);\n          }}\n          onError={() => {\n            console.log(\"Login Failed\");\n          }}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default GoogleLoginAuth;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,WAAW,QAAQ,qBAAqB;AACjD,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,KAAK,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEvC,SAASC,eAAeA,CAAA,EAAG;EACzB,MAAMC,eAAe,GAAG,MAAOC,eAAe,IAAK;IACjD,MAAMC,GAAG,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAC,8BAA8B,CAAC;IAC3D,MAAMC,IAAI,GAAGF,GAAG,CAACE,IAAI;IACrBC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACjB,MAAMG,IAAI,GAAGH,IAAI,CAACI,IAAI,CAAC,MAAMD,IAAI,CAACE,KAAK,KAAKR,eAAe,CAACQ,KAAK,CAAC;IAClE,IAAIF,IAAI,EAAE;MACRb,KAAK,CAACgB,KAAK,CAAC,gDAAgD,CAAC;MAC7DL,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IACpC,CAAC,MAAM;MACLD,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IACpC;EACF,CAAC;EAED,oBACEV,OAAA,CAAAE,SAAA;IAAAa,QAAA,eACEf,OAAA;MAAKgB,SAAS,EAAC,6BAA6B;MAAAD,QAAA,eAC1Cf,OAAA,CAACL,WAAW;QACVsB,SAAS,EAAGC,kBAAkB,IAAK;UACjCT,OAAO,CAACC,GAAG,CAACQ,kBAAkB,CAACC,UAAU,CAAC;UAC1C,MAAMC,eAAe,GAAGxB,SAAS,CAACsB,kBAAkB,CAACC,UAAU,CAAC;UAChEV,OAAO,CAACC,GAAG,CAACU,eAAe,CAAC;UAC5BhB,eAAe,CAACgB,eAAe,CAACP,KAAK,CAAC;QACxC,CAAE;QACFQ,OAAO,EAAEA,CAAA,KAAM;UACbZ,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;QAC7B;MAAE;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC,gBACN,CAAC;AAEP;AAACC,EAAA,GA/BQvB,eAAe;AAiCxB,eAAeA,eAAe;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}